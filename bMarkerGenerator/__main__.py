# -*- coding: utf-8 -*-
import os, sys, re
from os.path import basename, dirname, join, isdir
from shutil import which
import argparse, textwrap

from bMarkerGenerator.bMarkerGenerator import bMarkerGenerator
from src.HATK_Error import HATK_InputPreparation_Error, RaiseError
from src.util import Exists
from NomenCleaner.src.CHPED import CHPED

std_MAIN_PROCESS_NAME = "\n[bMarkerGenerator]: "
std_ERROR_MAIN_PROCESS_NAME = "\n[bMarkerGenerator::ERROR]: "
std_WARNING_MAIN_PROCESS_NAME = "\n[bMarkerGenerator::WARNING]: "


class HATK_bMarkerGenertor(object):

    # External software
    plink = which("plink") if Exists(which("plink")) else RaiseError(HATK_InputPreparation_Error, "PLINK can't be found.")

    def __init__(self, _chped, _out, _hg, _dictionary_AA, _dictionary_SNPS, _variants=None,
                 _f_save_intermediates=False, _result=None):

        """

        """

        ### Main Variables ###
        self.CHPED = CHPED(_chped)
        self.out = _out
        self.hg = _hg

        self.variants = _variants

        self.dict_AA_prefix = _dictionary_AA
        self.dict_AA_seq = self.dict_AA_prefix+'.txt' if Exists(self.dict_AA_prefix+'.txt') else RaiseError(HATK_InputPreparation_Error, "Given AA sequence dictionary file('{}') can't be found.".format(self.dict_AA_prefix))
        self.dict_AA_map = self.dict_AA_prefix+'.map' if Exists(self.dict_AA_prefix+'.map') else RaiseError(HATK_InputPreparation_Error, "Given AA dictionary Map file('{}') can't be found.".format(self.dict_AA_prefix))

        self.dict_SNPS_prefix = _dictionary_SNPS
        self.dict_SNPS_seq = self.dict_SNPS_prefix+'.txt' if Exists(self.dict_SNPS_prefix+'.txt') else RaiseError(HATK_InputPreparation_Error, "Given SNPS sequence dictionary file('{}') can't be found.".format(self.dict_SNPS_prefix))
        self.dict_SNPS_map = self.dict_SNPS_prefix+'.map' if Exists(self.dict_SNPS_prefix+'.map') else RaiseError(HATK_InputPreparation_Error, "Given SNPS dictionary Map file('{}') can't be found.".format(self.dict_SNPS_prefix))

        self.f_save_intermediates = _f_save_intermediates


        ### Main Actions ###
        if _result:
            self.setResults(_result)
        else:
            bMarkerGenerator(self.CHPED, self.out, self.hg, self.dict_AA_prefix, self.dict_SNPS_prefix,
                             _variants=self.variants, _f_save_intermediates=self.f_save_intermediates,
                             _plink=self.plink)





    def setResults(self, _result):
        pass


if __name__ == "__main__":

    parser = argparse.ArgumentParser(prog='bMarkerGenerator',
                                     formatter_class=argparse.RawTextHelpFormatter,
                                     description=textwrap.dedent('''\
    #################################################################################################

        bMarkerGenerator.py

        Generating markers based on HLA sequence information dictionary(generated by "IMGT2Seq").


        HLA PED file should contain HLA alleles in the following (alphabetical) order:
        HLA-A, B, C, DPA1, DPB1, DQA1, DQB1, DRB1

    #################################################################################################
                                     '''),
                                     # epilog="-*- Recoded to Python script by Wansun Choi in Han lab. at Asan Medical Center -*-",
                                     add_help=False)

    parser._optionals.title = "OPTIONS"

    parser.add_argument("-h", "--help", help="\nShow this help message and exit\n\n", action='help')

    parser.add_argument("--variants", help="\nInput variants data file(.bed/.bim/.fam)\n\n")
    parser.add_argument("--chped", help="\nHLA Type Data(.chped)\n\n", required=True)
    parser.add_argument("--hg", help="\nHuman Genome version(ex. 18, 19)\n\n", choices=["18", "19", "38"], metavar="hg",
                        default="19", required=True)
    parser.add_argument("--out", help="\nOutput file prefix\n\n", required=True)

    parser.add_argument("--dict-AA", help="\nPrefix of AA HLA Dictionary file(*.txt, *.map).\n\n", required=True)
    parser.add_argument("--dict-SNPS", help="\nPrefix of SNP HLA Dictionary file(*.txt, *.map).\n\n", required=True)

    parser.add_argument("--save-intermediates", help="\nDon't remove intermediate files.\n\n", action='store_true')

    ##### <for Test> #####

    # 2019. 01. 10
    # args = parser.parse_args(["-chped", "/Users/wansun/Dropbox/_Sync_MyLaptop/Data/HATK/data/b_MarkerGenerator/HAPMAP_CEU_HLA.imgt370.4field.chped",
    #                           "-variants", "/Users/wansun/Dropbox/_Sync_MyLaptop/Data/HATK/data/b_MarkerGenerator/HAPMAP_CEU",
    #                           "-o", "/Users/wansun/Git_Projects/HATK/tests/_2_b_MarkerGenerator/20190110_bMarkerTest/HAPMAP_CEU_HLA.imgt370.hg18",
    #                           "-hg", "18",
    #                           "-dict-AA", "/Users/wansun/Dropbox/_Sync_MyLaptop/Data/HATK/data/b_MarkerGenerator/HLA_DICTIONARY_AA.hg18.imgt370",
    #                           "-dict-SNPS", "/Users/wansun/Dropbox/_Sync_MyLaptop/Data/HATK/data/b_MarkerGenerator/HLA_DICTIONARY_SNPS.hg18.imgt370"
    #                           ])

    ##### <for Publication> #####

    args = parser.parse_args()
    print(args)

    # # Implementing Main Function.
    # bMarkerGenerator(_CHPED=args.chped, _OUT=args.out, _hg=args.hg, _variants=args.variants,
    #                  _dictionary_AA=args.dict_AA, _dictionary_SNPS=args.dict_SNPS,
    #                  __save_intermediates=args.save_intermediates)

    HATK_bMarkerGenertor(args.chped, args.out, args.hg, args.dict_AA, args.dict_SNPS, _variants=args.variants,
                         _f_save_intermediates=args.save_intermediates)