#-*- coding: utf-8 -*-
import os, sys, re
from os.path import basename, dirname, join
import argparse, textwrap
from shutil import which

from HLA_Heatmap.heatmap import HEATMAP
from src.util import Exists, checkFile, findExec
from src.HATK_Error import HATK_InputPreparation_Error, RaiseError

std_MAIN = "\n[Heatmap]: "
std_ERROR = "\n[Heatmap::ERROR]: "
std_WARNING = "\n[Heatmap::WARNING]: "


class HATK_Heatmap(object):

    # External software
    Rscript = findExec("Rscript", std_ERROR+"'Rscript' command can't be found. Please install R.")

    def __init__(self, _HLA:list, _out_prefix, _maptable, _assoc_result, _f_save_intermediates=False):
        ### Main Variables ###
        self.HLA = _HLA[0]
        self.out_prefix = _out_prefix
        self.maptable = checkFile(_maptable)
        self.assoc_result = checkFile(_assoc_result)

        self.Heatmap = None

        ### Main Actions ###
        # HLA match check
        m_HLA_MAPTABLE = re.match(r'HLA_MAPTABLE_(\w+)\.', basename(_maptable))
        if not (bool(m_HLA_MAPTABLE) and (self.HLA == m_HLA_MAPTABLE.group(1))):
            RaiseError(HATK_InputPreparation_Error,
                       std_ERROR+"Requested HLA('{}') and the HLA('{}') of given Maptable('{}') are not matched." \
                       .format(self.HLA, m_HLA_MAPTABLE.group(1), self.maptable))

        self.Heatmap = HEATMAP(self.HLA, self.out_prefix, self.maptable, self.assoc_result, _f_save_intermediates,
                               self.Rscript)


    def __repr__(self):
        str_HLA = \
            "- HLA (requested): {}\n".format(self.HLA)
        str_assoc = \
            "- Association test result file: {}\n".format(self.assoc_result)
        str_maptable = \
            "- Maptable: {}\n".format(self.maptable)
        str_outprefix = \
            "- Output prefix: {}\n".format(self.out_prefix)

        str_Heatmap_output = \
            "- Heatmap output: {}\n".format(self.Heatmap)

        str_summary = ''.join([
            str_HLA, str_assoc, str_maptable, str_outprefix, str_Heatmap_output
        ]).rstrip('\n')

        return str_summary


    def __bool__(self): return Exists(self.Heatmap)



if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog='Heatmap',
                                     formatter_class=argparse.RawTextHelpFormatter,
                                     description=textwrap.dedent('''\
    #################################################################################################

        HLA_Heatmap module

        - 

    #################################################################################################
                                     '''),
                                     add_help=False)

    parser._optionals.title = "OPTIONS"

    parser.add_argument("-h", "--help", help="\nShow this help message and exit\n\n", action='help')

    parser.add_argument("--out", help="\nOutput file name prefix.\n\n", required=True)

    parser.add_argument("--HLA", help="\nHLA gene to plot heatmap.\n\n", required=True, nargs='+')
    parser.add_argument("--maptable", "-mt",
                        help="\nMarker Dictionary file(Maptable) generated by 'IMGTt2Sequence'.\n\n")

    parser.add_argument("--assoc-result", "-ar", help="\nAssociation test result file(ex. *.assoc.logistic).\n\n",
                        required=True)

    parser.add_argument("--save-intermediates", help="\nSave intermediate files.\n\n", action='store_true')

    ##### < for Test > #####

    # (2018. 10. 29.) HATK Integration test
    # args = parser.parse_args(["--HLA", "DQB1",
    #                           "-mt", "/Users/wansun/Git_Projects/HLA_Heatmap/data/HLA_MAPTABLE_DQB1.hg19.imgt3320.txt",
    #                           "-o", "tests/T1D_DQB1_test",
    #                           "-ar", "/Users/wansun/Git_Projects/HLA_Heatmap/data/example/20190327_WTCCC_T1D.assoc.logistic",
    #                           "--save-intermediates"
    #                           ])

    # args = parser.parse_args(["--HLA", "E",
    #                           "--maptable", "/home/wansonchoi/sf_VirtualBox_Share/HATK/tests/IMGT3470_dict_hg18/HLA_MAPTABLE_E.hg18.imgt3470.txt",
    #                           "--out", "/home/wansonchoi/sf_VirtualBox_Share/HATK/tests/20220401_Heatmap/wtccc_filtered_58C_RA.hatk.300+300.imgt3470.header.subset.chr6.hg18.29-34mb.heatmap.HLA-E",
    #                           "-ar", "/home/wansonchoi/sf_VirtualBox_Share/HATK/tests/20220314_BEAGLE/wtccc_filtered_58C_RA.hatk.300+300.imgt3470.header.subset.chr6.hg18.29-34mb.assoc.logistic",
    #                           "--save-intermediates"
    #                           ])



    ##### < for Publish > #####

    args = parser.parse_args()
    print(args)

    r = HATK_Heatmap(args.HLA, args.out, args.maptable, args.assoc_result, args.save_intermediates)
    print(r)




    # # main function execution.
    # HEATMAP(_hla_name=args.HLA, _out=args.o, _p_maptable=args.maptable, _p_assoc_result=args.assoc_result,
    #         __save_intermediates=args.save_intermediates)
    #
    #
    #
    #
    #     if not _HLA:
    #         print(std_ERROR_MAIN_PROCESS_NAME + "Please check '--HLA' argument again.")
    #         sys.exit()
    #
    #     if isinstance(_HLA, list) and len(_HLA) == 1:
    #         _HLA = _HLA.pop()
    #     elif isinstance(_HLA, list) and len(_HLA) > 1:
    #         print(std_WARNING_MAIN_PROCESS_NAME + "Only 1 HLA gene can be used.\n"
    #                                               "Only the 1st HLA gene('{}') will be used for Heatmap plot and the other(s)('{}') will be discarded."
    #                                               "".format(_HLA[0], ', '.join(_HLA[1:])))
    #         _HLA = _HLA[0]
    #
    #     if not _out:
    #         print(std_ERROR_MAIN_PROCESS_NAME + "Please check '--out' argument again.")
    #         sys.exit()
    #
    #     if not _p_maptable:
    #         print(std_ERROR_MAIN_PROCESS_NAME + "Please check '--maptable' argument again.")
    #         sys.exit()
    #
    #
    #     t_single_assoc_result = None
    #
    #     if not _p_assoc_result:
    #         print(std_ERROR_MAIN_PROCESS_NAME + "Please check '--assoc-result/-ar' argument again.")
    #         sys.exit()
    #     else:
    #         # Supposed to be a list with only one element
    #         if isinstance(_p_assoc_result, list):
    #
    #             if len(_p_assoc_result) > 1:
    #                 print(std_WARNING_MAIN_PROCESS_NAME + "More than 1 association test results were given.\n"
    #                                                       "Only 1st item will be used to plot HLA Heatmap.")
    #
    #             t_single_assoc_result = _p_assoc_result[0]
    #
    #         elif isinstance(_p_assoc_result, str):
    #
    #             t_single_assoc_result = _p_assoc_result
    #
    #
    #     self.result = HEATMAP(_HLA, _out, _p_maptable, t_single_assoc_result,
    #                           __save_intermediates=kwargs["__save_intermediates"], _p_src=kwargs["_p_src"],
    #                           _p_data=kwargs["_p_data"])
    #
    #
    #     self.removeIntermediates(_out)